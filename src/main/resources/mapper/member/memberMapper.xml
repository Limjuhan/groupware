<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ldb.groupware.mapper.mybatis.member.MemberMapper">

    <!-- 로그인 체크 -->
    <select id="loginId" resultType="string">
        SELECT mem_id
        FROM member
        WHERE mem_id = #{id}
          AND mem_pass = #{password}
          AND mem_status = '재직'
    </select>

    <!-- 회원 정보 조회 -->
    <select id="selectInfo" parameterType="string" resultType="MemberUpdateDto">
        SELECT m.mem_id,
               m.mem_name,
               m.mem_email,
               m.mem_private_email                    AS privateEmail,
               m.mem_phone,
               d.dept_name,
               r.rank_name,
               m.mem_status,
               m.mem_hiredate,
               m.mem_gender,
               STR_TO_DATE(m.jumin_front, '%y%m%d')   AS birthDate,
               m.mem_address                          AS address,
               CONCAT(a.file_path, '/', a.saved_name) AS memPicture
        FROM member m
                 LEFT JOIN dept d ON m.dept_id = d.dept_id
                 LEFT JOIN rank r ON m.rank_id = r.rank_id
                 LEFT JOIN attachment a ON a.business_id = m.mem_id AND a.attach_type = 'P'
        WHERE m.mem_id = #{memId}
    </select>

    <!-- 개인정보 수정 -->
    <update id="updateInfo" parameterType="map">
        UPDATE member
        SET mem_phone         = #{memPhone},
            mem_private_email = #{privateEmail},
            mem_address       = #{address}
        WHERE mem_id = #{memId}
    </update>

    <!-- 이미지 등록 -->
    <insert id="insertAttach" parameterType="AttachmentDto">
        INSERT INTO attachment
        (business_id, attach_type, original_name, saved_name, file_path, created_at)
        VALUES (#{businessId}, #{attachType}, #{originalName}, #{savedName}, #{filePath}, NOW())
    </insert>

    <!-- 사원 수 카운트 -->
    <select id="countMembers" resultType="int">
        SELECT COUNT(*)
        FROM member m
        LEFT JOIN dept d ON m.dept_id = d.dept_id
        LEFT JOIN rank r ON m.rank_id = r.rank_id
        WHERE 1=1
        <if test="dept != null and dept != ''">
            AND d.dept_name = #{dept}
        </if>
        <if test="rank != null and rank != ''">
            AND r.rank_name = #{rank}
        </if>
        <if test="name != null and name != ''">
            AND m.mem_name LIKE CONCAT('%', #{name}, '%')
        </if>
    </select>

    <!-- 페이징 포함 사원 조회 -->
    <select id="getPagedMembers" resultType="MemberListDto">
        SELECT
        m.mem_id,
        m.mem_name,
        m.dept_id,
        m.rank_id,
        d.dept_name,
        r.rank_name
        FROM member m
        LEFT JOIN dept d ON m.dept_id = d.dept_id
        LEFT JOIN rank r ON m.rank_id = r.rank_id
        WHERE 1=1
        <if test="dept != null and dept != ''">
            AND d.dept_id = #{dept}
        </if>
        <if test="rank != null and rank != ''">
            AND r.rank_id = #{rank}
        </if>
        <if test="name != null and name != ''">
            AND m.mem_name LIKE CONCAT('%', #{name}, '%')
        </if>
        ORDER BY m.mem_id DESC
        LIMIT #{limit} OFFSET #{start}
    </select>

    <!-- 부서 이름 조회 -->
    <select id="getDeptList" resultType="DeptDto">
        SELECT dept_id, dept_name
        FROM dept
        WHERE use_yn = 'Y'
        ORDER BY dept_id
    </select>

    <!-- 직급 이름 조회 -->
    <select id="getRankList" resultType="RankDto">
        SELECT rank_id, rank_name
        FROM rank
        WHERE use_yn = 'Y'
        ORDER BY rank_id
    </select>

    <!-- 다음 사원번호 숫자 조회 -->
    <select id="nextMemId" resultType="string">
        SELECT LPAD(IFNULL(MAX(CAST(SUBSTRING(mem_id, 9, 4) AS UNSIGNED)), 0) + 1, 4, '0')
        FROM member
        WHERE mem_id LIKE CONCAT('LDB', #{year}, '%')
    </select>

    <!-- 사원 등록 -->
    <insert id="insertMember" parameterType="map">
        INSERT INTO member (mem_id, mem_pass, mem_email, mem_private_email,
                            mem_name, mem_gender, mem_phone,
                            jumin_front, jumin_back, mem_address,
                            mem_status, mem_hiredate,
                            dept_id, rank_id,
                            created_by, created_at)
        VALUES (#{memId}, #{memPass}, #{memEmail}, #{memPrivateEmail},
                #{memName}, #{memGender}, #{memPhone},
                #{juminFront}, #{juminBack}, #{memAddress},
                #{memStatus}, #{memHiredate},
                #{deptId}, #{rankId},
                #{createdBy}, #{createdAt})
    </insert>

    <!-- 사원 정보 수정 -->
    <update id="updateMemberByMng">
        UPDATE member
        SET dept_id = #{deptId},
            rank_id = #{rankId}
        WHERE mem_id = #{memId}
    </update>

    <!-- 연차 정보 조회 (가장 최근 연도) -->
    <select id="selectAnnualByMemId" parameterType="string" resultType="MemberAnnualLeaveDto">
        SELECT an_id, mem_id, year, total_days, use_days, remain_days
        FROM annual_leave
        WHERE mem_id = #{memId}
        ORDER BY year DESC
            LIMIT 1
    </select>

    <!-- 연차 사용 이력 -->
    <select id="selectAnnualLeaveHistory" resultType="MemberAnnualLeaveHistoryDto">
        SELECT ah.start_date  AS startDate,
               ah.end_date    AS endDate,
               ah.leave_code  AS leaveCode,
               lt.leave_name  AS leaveName,
               ah.approved_by AS approvedBy,
               m.mem_name     AS approvedByName
        FROM annual_leave_history ah
                 LEFT JOIN leave_type lt ON ah.leave_code = lt.leave_code
                 LEFT JOIN member m ON ah.approved_by = m.mem_id
        WHERE ah.mem_id = #{memId}
        ORDER BY ah.start_date DESC
    </select>
</mapper>